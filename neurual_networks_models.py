# -*- coding: utf-8 -*-
"""Neurual networks models mit funktionen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qehWmwIhfx8AqJR5ED72bg5lyRWzfcWN
"""

def train_model(symbol):
    # Download historical prices of SPY
    symbol = 'SPY'
    start_date = start_date = datetime.datetime.now() -relativedelta(years= 23)
    end_date = datetime.datetime.now()
    all_data = yfinance.download(symbol, start=start_date, end=end_date, interval="1d")
    # add start_date as rolling e.g. last 20 years to train

    # Calculate technical indicators
    all_data['SMA_5'] = all_data['Close'].rolling(window=5).mean()
    all_data['SMA_15'] = all_data['Close'].rolling(window=15).mean()
    all_data['SMA_ratio'] = all_data['SMA_15'] / all_data['SMA_5']
    all_data['15MA'] = all_data['Close'].rolling(window=15).mean()
    all_data['SD'] = all_data['Close'].rolling(window=15).std()
    all_data['upperband'] = all_data['15MA'] + 2 * all_data['SD']
    all_data['lowerband'] = all_data['15MA'] - 2 * all_data['SD']
    all_data['return'] = all_data['Close'].pct_change()

    # Prepare data for backtesting (same as your original code)
    all_data['Target_Direction'] = numpy.where(all_data['return'] > 0, 1, 0)
    all_data = all_data.dropna().copy()
    Target_variables = ['SMA_ratio', 'SMA_5', 'SMA_15', '15MA', 'SD', 'upperband', 'lowerband']

    # Split data into train and test sets (same as your original code)
    X = all_data[Target_variables]
    y = all_data['Target_Direction']
    train_size = int(0.75 * len(all_data))
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # Train the model (same as your original code)
    clf =  MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(50, 10,50), random_state=1)
    model= clf.fit(X_train, y_train)

    # Save the trained model for future use
    joblib.dump(model, 'trained_model.pkl')

# Load the trained model and data to predict
def load_model_and_predict(symbol):
    clf = joblib.load('trained_model.pkl')

    # Download historical prices of SPY
    symbol
    start_date = start_date = datetime.datetime.now() -relativedelta(days= 30)
    end_date = datetime.datetime.now()
    all_data = yfinance.download(symbol, start=start_date, end=end_date, interval="1d")
    # add start_date as rolling e.g. last 20 years to train

    # Calculate technical indicators
    all_data['SMA_5'] = all_data['Close'].rolling(window=5).mean()
    all_data['SMA_15'] = all_data['Close'].rolling(window=15).mean()
    all_data['SMA_ratio'] = all_data['SMA_15'] / all_data['SMA_5']
    all_data['15MA'] = all_data['Close'].rolling(window=15).mean()
    all_data['SD'] = all_data['Close'].rolling(window=15).std()
    all_data['upperband'] = all_data['15MA'] + 2 * all_data['SD']
    all_data['lowerband'] = all_data['15MA'] - 2 * all_data['SD']
    all_data['return'] = all_data['Close'].pct_change()

    # Prepare data for backtesting (same as your original code)
    all_data = all_data.dropna().copy()
    Target_variables = ['SMA_ratio', 'SMA_5', 'SMA_15', '15MA', 'SD', 'upperband', 'lowerband']

    # Split data into train and test sets (same as your original code)
    X = all_data[Target_variables]
    X_test =  X[-1:]

    y_pred =  clf.predict(X_test)
    test_data['Predicted_Direction'] = y_pred
    test_data['Signal'] = numpy.where(test_data['Predicted_Direction'] == 1, 'Buy', 'Sell')

    date_of_prediction = all_data.index[-1]

    # Create a DataFrame with predictions and other relevant data
    predictions_data = pandas.DataFrame({
      'Date': [date_of_prediction],
      'Predicted_Direction': y_pred,
      'Signal': ['Buy' if pred == 1 else 'Sell' for pred in y_pred]
    })
    # Save predictions to a CSV file
    file_path = 'predictions.csv'
    predictions_data.to_csv(file_path, mode='a', header=False, index=False)

train_model('SPY')
load_model_and_predict('SPY')